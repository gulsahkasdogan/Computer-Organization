.data
	
space: 		.asciiz " "
endl: 		.asciiz "\n"
enterSize:	.asciiz "Please enter the dimension of matrix: "

retrieveMesgRow:	.asciiz "Please row value of element to retrieve: "

retrieveMesgCol:	.asciiz "Please column value of element to retrieve: "

sumRowIs:		.asciiz "Sum of row is: "
	
rowSumMesg:	.asciiz "Please enter row to sum up: "

colSumIs:		.asciiz "Sum of column is: "

colSumMesg:	.asciiz "Please enter column to sum up: "

leftPar:		.asciiz "("

rightPar:		.asciiz ")"

comma:		.asciiz ","

dob:		.asciiz " : "

menuMesg:		.asciiz "\nMenu\n1)Create a matrix \n2)Display Matrix\n3)Summation Row Major\n4)Summation Column Major\n5)Retreive Element\n6)Show each elements place\n7)Quit\nSelection: "

wantContinue:	.asciiz "\nDo you want to continue? If yes press 1: "

select:		.asciiz "Select an option: "

.text
main:	la $a0,menuMesg
	li $v0,4
	syscall
	
	li $v0,5
	syscall
	
	move $a0,$t5
	
	beq $v0,1,op1
	beq $v0,2,op2
	beq $v0,3,op3
	beq $v0,4,op4
	beq $v0,5,op5
	beq $v0,6,op6
	beq $v0,7,op7

continue: j main
	
op1:	jal createMatrix 
	move $a0,$v0
	move $t5,$a0
	j continue 
	
op2:	jal displayMatrix
	move $a0,$v0
	move $t5,$a0
	j continue 
	
op3:	jal rowSum
	move $a0,$v0
	move $t5,$a0
	j continue
	 
op4:	jal colSum
	move $a0,$v0
	move $t5,$a0
	j continue 
	
op5:	jal retrieveElement
	move $a0,$v0
	move $t5,$a0
	j continue 
	
op6:	jal displayBySpec
	move $a0,$v0
	move $t5,$a0
	j continue 
	
op7:	j exit 
		
createMatrix: 	la $a0,enterSize
		li $v0,4
		syscall
		
		li $v0,5
		syscall
		
		move $a1,$v0 #a1 has the size of the matrix 
		
		li $t0,0
		mul $t0,$a1,$a1 #t0 has the amount of memory to allocate 
		move $a0,$t0
		
		li $v0,9
		syscall 
		#a0 has the memory allocated 
		
		
		li $t1,0
		#s0 has the base address of array
		move $s0,$v0
		move $t5,$s0#backup
		
		li $s3,1 #element initializer 
				 
	colLoop_create:	li $t0,0
		
			blt $t1,$a1,rowLoop_create
	return_create:	
			addi $t1,$t1,1
		
			bge $t1,$a1,doneCreating
			j colLoop_create
		

		
		rowLoop_create:
			
			sw $s3,0($s0)
			
			addi $s0,$s0,4
			addi $t0,$t0,1
			addi $s3,$s3,1
			
			blt $t0,$a1,rowLoop_create
			j return_create
			
		doneCreating: 	move $v0,$t5#v0 da array base address return edilecek
				jr $ra
				

displayMatrix: 	#a0 has the beginning address of array 
		#display one row increment base address "size" times
		#base address+4 >size kere 
		#do the same size times
		move $s0,$a0
		move $t5,$a0

		li $t1,0
		#s0 has the base address of array 
	colLoop_display:	li $t0,0
		
			blt $t1,$a1,rowLoop_display
	return_display:	
		
			la $a0,endl
			li $v0,4
			syscall
		
			addi $t1,$t1,1
		
			bge $t1,$a1,donePrinting
			j colLoop_display
		

		
		rowLoop_display:	
				lw $a0,0($s0)
				li $v0,1
				syscall
			
				addi $s0,$s0,4
				addi $t0,$t0,1
			
				la $a0,space
				li $v0,4
				syscall
			
				blt $t0,$a1,rowLoop_display
				j return_display	
		
	donePrinting: 	move $v0,$t5 #v0 has base address 
			jr $ra

retrieveElement:	move $s0,$a0
		move $t5,$a0#backup
		
		la $a0,retrieveMesgRow
		li $v0,4
		syscall
		
		li $v0,5
		syscall
		 
		move $t0,$v0#t0 has the row to reach
		
		la $a0,retrieveMesgCol
		li $v0,4
		syscall
		
		li $v0,5
		syscall
		 
		move $t1,$v0#t1 has the column to reach
		
		#address to reach=base address + (t0-1)*n*4 + (t1-1)*4
		#n=size
		#a1 has the size
		#a0 has the array base address
		
		addi $t0,$t0,-1 # t0=t0-1
		mul $t0,$t0,4 #(t0-1)*4
		mul $t0,$t0,$a1 #(t0-1)*4*n
		
		addi $t1,$t1,-1 #t1=t1-1
		mul $t1,$t1,4 #t1=(t1-1)*4
		
		
		add $s0,$s0,$t0 #base address + (t0-1)*n*4 
		add $s0,$s0,$t1 #base address + (t0-1)*n*4 + (t1-1)*4
		
		lw $s0,0($s0)
		
		move $a0,$s0
		li $v0,1
		syscall
		
		move $v0,$t5 #v0 has base address 
		
		jr $ra
		
		
rowSum:		li $t6,1
		move $t5,$a0
		move $s0,$a0	

rowMajor:		move $s0,$t5
		
		move $t0,$t6 #t0 has the row to sum up
		#a0 has the base address 
		#a1 has the size
		
		
		addi $t0,$t0,-1 #t0=t0-1
		mul $t0,$t0,4 #t0=4*(t0-1)
		mul $t0,$t0,$a1
		
		add $s0,$s0,$t0
		
		li $t1,0#loop counter
		li $t2,0#result
		
		sumLoop_row: 	bge $t1,$a1,doneSum_row
				lw $t3,0($s0)
				add $t2,$t2,$t3
				
				addi $s0,$s0,4
				addi $t1,$t1,1
				j sumLoop_row
		
		doneSum_row:	la $a0,sumRowIs
				li $v0,4
				syscall 
				
				move $a0,$t2
				li $v0,1
				syscall
				
				move $v0,$t5
				
				addi $t6,$t6,1
				
				ble $t6,$a1,rowMajor
				
				jr $ra
		

colSum:	move $t5,$a0#backup
	move $s0,$a0
	li $s5,1

colMajor:
	move $s0,$t5
	li $t6,0
	li $t4,0
	
	
	move $t0,$s5 #t0 has col index
	
	#amount of increment: t1
	#a1 has the size of the matrix 
	#we are working on integers
	
	li $t1,4
	mul $t1,$t1,$a1 # amount of increment per cycle: 4*n
	
	li $t2,0 #result
	li $t3,0#counter
	
	addi $t0,$t0,-1#index-1
	mul $t0,$t0,4#4(index-1)
	add $s0,$s0,$t0#base+4(index-1)
	
	
	sumLoop_col:	bgt $t3,$a1,doneSum_col
	
			lw $t6,0($s0)
			add $t2,$t2,$t6
			
			add $s0,$s0,$t1 #currentBase+4*n
			
			addi $t3,$t3,1
			j sumLoop_col
	
	doneSum_col:	la $a0,colSumIs
			li $v0,4
			syscall 
			
			move $a0,$t2
			li $v0,1
			syscall	
		
			move $v0,$t5
			
			addi $s5,$s5,1
			ble $s5,$a1,colMajor
			
			jr $ra



displayBySpec:	
		move $s0,$a0
		move $t5,$a0
		
		li $t0,0 #counter1
		li $t1,0 #counter2
		#a1 has the matrix size
	colLoop_spec:	li $t0,0
		
			blt $t1,$a1,rowLoop_spec
	return_spec:	
			addi $t1,$t1,1
		
			bge $t1,$a1,done_spec
			j colLoop_spec
		

		
		rowLoop_spec:	la $a0,leftPar#(
				li $v0,4
				syscall
				
				
				addi $t7,$t1,1
				
				move $a0,$t7#ROW
				li $v0,1
				syscall
				
				la $a0,comma
				li $v0,4
				syscall
				
				addi $t7,$t0,1
			
				move $a0,$t7#COL
				li $v0,1
				syscall
				
				la $a0,rightPar#)
				li $v0,4
				syscall
				
				la $a0,dob
				li $v0,4
				syscall
				
				
				lw $a0,0($s0)
				li $v0,1
				syscall
			
				addi $s0,$s0,4
				addi $t0,$t0,1
			
				la $a0,endl
				li $v0,4
				syscall
			
				blt $t0,$a1,rowLoop_spec
				j return_spec	
	

	done_spec: 	move $v0,$t5 #v0 has base address 
			jr $ra
		

exit:	li $v0,10
	syscall
